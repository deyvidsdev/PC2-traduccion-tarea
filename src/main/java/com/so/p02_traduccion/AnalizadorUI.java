/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.so.p02_traduccion;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JOptionPane;
import java.util.List;

/**
 *
 * @author Deyvids
 */
public class AnalizadorUI extends javax.swing.JFrame {

    /**
     * Creates new form AnalizadorUI
     */
    public AnalizadorUI() {
        initComponents();
        cargarTokensIniciales();
    }
    
    private void cargarTokensIniciales() {
        String archivoExcel = "C:\\Users\\Deyvids\\Documents\\Token.xlsx";
        if (P02_Traduccion.cargarTablaDesdeExcel(archivoExcel)) {
            // ✅ Mensaje de éxito
            System.out.println("Tokens cargados exitosamente desde Excel");
            System.out.println("Total tokens cargados: " + P02_Traduccion.tablaSimbolos.size());
        } else {
            JOptionPane.showMessageDialog(this, 
                "Error al cargar tokens desde Excel.\nVerifica que el archivo existe: " + archivoExcel, 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextAreaInput = new javax.swing.JTextArea();
        BtnAnalizadorTxt = new javax.swing.JButton();
        BtnAnalizatTextArea = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TextAreaAnalizado = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setMinimumSize(new java.awt.Dimension(630, 650));
        jPanel1.setPreferredSize(new java.awt.Dimension(650, 670));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("ANALIZADOR LEXICO");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 190, 50));

        TextAreaInput.setColumns(20);
        TextAreaInput.setRows(5);
        jScrollPane1.setViewportView(TextAreaInput);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 610, 180));

        BtnAnalizadorTxt.setText("Analizador por TXT");
        BtnAnalizadorTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAnalizadorTxtActionPerformed(evt);
            }
        });
        jPanel1.add(BtnAnalizadorTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, -1, -1));

        BtnAnalizatTextArea.setText("Analizardor Text Area");
        BtnAnalizatTextArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAnalizatTextAreaActionPerformed(evt);
            }
        });
        jPanel1.add(BtnAnalizatTextArea, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 260, -1, -1));

        TextAreaAnalizado.setColumns(20);
        TextAreaAnalizado.setRows(5);
        jScrollPane2.setViewportView(TextAreaAnalizado);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, 610, 310));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnAnalizadorTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAnalizadorTxtActionPerformed
        // Ruta directa al archivo que quieres analizar
        String rutaArchivo = "C:\\Users\\Deyvids\\Documents\\Analizar.txt";

        // Verificar que el archivo existe
        File archivo = new File(rutaArchivo);
        if (!archivo.exists()) {
            JOptionPane.showMessageDialog(this, 
                "No se encontró el archivo: " + rutaArchivo, 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Limpiar área de resultado
        TextAreaAnalizado.setText("");

        // Mostrar mensaje de que está analizando
        TextAreaAnalizado.setText("Analizando archivo...\n");

        // Analizar archivo y mostrar resultado en el TextArea
        analizarArchivoParaUI(rutaArchivo);
    }//GEN-LAST:event_BtnAnalizadorTxtActionPerformed

    // MÉTODO PARA ANALIZAR ARCHIVO Y MOSTRAR EN UI
    // Agrega este método a tu clase AnalizadorUI:

    private void analizarArchivoParaUI(String rutaArchivo) {
        StringBuilder resultado = new StringBuilder();
        resultado.append("═══════════════════════════════════════════════════════════════════════════════\n");
        resultado.append("                    RESULTADO DEL ANALIZADOR LÉXICO\n");
        resultado.append("═══════════════════════════════════════════════════════════════════════════════\n\n");

        try {
            BufferedReader lector = new BufferedReader(new FileReader(rutaArchivo));
            String lineaActual;
            int numeroLinea = 1;

            while ((lineaActual = lector.readLine()) != null) {
                if (!lineaActual.trim().isEmpty()) {
                    // Encabezado de línea con más formato
                    resultado.append("───────────────────────────────────────────────────────────────────────────────\n");
                    resultado.append("LÍNEA ").append(numeroLinea).append(": ").append(lineaActual).append("\n");
                    resultado.append("───────────────────────────────────────────────────────────────────────────────\n");

                    List<String> tokens = P02_Traduccion.extraerTokensDeLinea(lineaActual);

                    for (String token : tokens) {
                        if (!token.trim().isEmpty()) {
                            String analisis = analizarTokenParaUI(token, numeroLinea);
                            resultado.append("  ").append(analisis).append("\n"); // Indentación
                        }
                    }
                }
                numeroLinea++;
            }

            lector.close();

        } catch (FileNotFoundException e) {
            resultado.append("❌ ERROR: No se encontró el archivo ").append(rutaArchivo);
        } catch (IOException e) {
            resultado.append("❌ ERROR al leer el archivo: ").append(e.getMessage());
        }

        // Mostrar resultado en el TextArea
        TextAreaAnalizado.setText(resultado.toString());
        TextAreaAnalizado.setCaretPosition(0); // Ir al inicio del texto
    }

    // MÉTODO AUXILIAR PARA ANALIZAR UN TOKEN (también necesario)
    private String analizarTokenParaUI(String palabra, int numeroLinea) {
        if (palabra == null || palabra.trim().isEmpty()) {
            return "";
        }

        palabra = palabra.trim();

        // 1. Verificar si es una cadena de texto
        if (P02_Traduccion.esCadenaTexto(palabra)) {
            return "✅ TOKEN: " + String.format("%-20s", palabra) + " CÓDIGO: 600    DESCRIPCIÓN: Cadena de texto";
        }

        // 2. Verificar si es token conocido (exacto)
        if (P02_Traduccion.tablaSimbolos.containsKey(palabra)) {
            int codigo = P02_Traduccion.tablaSimbolos.get(palabra);
            String descripcion = P02_Traduccion.tipoToken.get(palabra);
            return "✅ TOKEN: " + String.format("%-20s", palabra) + " CÓDIGO: " + String.format("%-7d", codigo) + " DESCRIPCIÓN: " + descripcion;
        }

        // 3. Verificar errores por mayúsculas/minúsculas
        String errorMayusculas = P02_Traduccion.verificarErrorMayusculas(palabra);
        if (errorMayusculas != null) {
            return "❌ ERROR LÉXICO (Línea " + numeroLinea + "): \"" + palabra + "\" " + errorMayusculas;
        }

        // 4. Verificar si es número
        if (P02_Traduccion.esNumeroValido(palabra)) {
            return "✅ TOKEN: " + String.format("%-20s", palabra) + " CÓDIGO: 400    DESCRIPCIÓN: Número";
        }

        // 5. Verificar si es identificador válido
        if (P02_Traduccion.esIdentificadorValido(palabra)) {
            return "✅ TOKEN: " + String.format("%-20s", palabra) + " CÓDIGO: 500    DESCRIPCIÓN: Identificador";
        }

        // 6. Token no reconocido
        return "❌ ERROR LÉXICO (Línea " + numeroLinea + "): \"" + palabra + "\" no es un token válido";
    }
    
    private void BtnAnalizatTextAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAnalizatTextAreaActionPerformed
        // Obtener el texto del TextArea superior
        String textoInput = TextAreaInput.getText().trim();

        // Verificar que hay texto para analizar
        if (textoInput.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Por favor, ingrese algún texto en el área superior para analizar.", 
                "Advertencia", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Limpiar área de resultado
        TextAreaAnalizado.setText("");

        // Mostrar mensaje de que está analizando
        TextAreaAnalizado.setText("Analizando texto del área superior...\n");

        // Analizar texto del TextArea
        analizarTextoParaUI(textoInput);
    }//GEN-LAST:event_BtnAnalizatTextAreaActionPerformed

    // MÉTODO PARA ANALIZAR TEXTO DEL TEXTAREA (agregar este método también):
    private void analizarTextoParaUI(String textoCompleto) {
        StringBuilder resultado = new StringBuilder();
        resultado.append("═══════════════════════════════════════════════════════════════════════════════\n");
        resultado.append("                    RESULTADO DEL ANALIZADOR LÉXICO\n");
        resultado.append("                        (Análisis de Text Area)\n");
        resultado.append("═══════════════════════════════════════════════════════════════════════════════\n\n");

        // Dividir el texto en líneas
        String[] lineas = textoCompleto.split("\n");

        for (int i = 0; i < lineas.length; i++) {
            String lineaActual = lineas[i];
            int numeroLinea = i + 1;

            if (!lineaActual.trim().isEmpty()) {
                // Encabezado de línea con más formato
                resultado.append("───────────────────────────────────────────────────────────────────────────────\n");
                resultado.append("LÍNEA ").append(numeroLinea).append(": ").append(lineaActual).append("\n");
                resultado.append("───────────────────────────────────────────────────────────────────────────────\n");

                List<String> tokens = P02_Traduccion.extraerTokensDeLinea(lineaActual);

                for (String token : tokens) {
                    if (!token.trim().isEmpty()) {
                        String analisis = analizarTokenParaUI(token, numeroLinea);
                        resultado.append("  ").append(analisis).append("\n"); // Indentación
                    }
                }
                resultado.append("\n\n"); // Doble espacio después de cada línea
            }
        }

        // Mostrar resultado en el TextArea
        TextAreaAnalizado.setText(resultado.toString());
        TextAreaAnalizado.setCaretPosition(0); // Ir al inicio del texto
    }

    // MÉTODO AUXILIAR PARA CONTAR LÍNEAS NO VACÍAS:
    private int contarLineasNoVacias(String[] lineas) {
        int contador = 0;
        for (String linea : lineas) {
            if (!linea.trim().isEmpty()) {
                contador++;
            }
        }
        return contador;
    }

    // OPCIONAL: MÉTODO PARA LIMPIAR AREAS (puedes agregar un botón para esto):
    private void limpiarAreas() {
        TextAreaInput.setText("");
        TextAreaAnalizado.setText("");
    }

    // OPCIONAL: MÉTODO PARA AGREGAR TEXTO DE EJEMPLO:
    private void cargarEjemploEnTextArea() {
        String ejemplo = "Si edad >= 18 {\n" +
                         "    mensaje = \"Mayor de edad\";\n" +
                         "    contador = contador + 1;\n" +
                         "} SiNo {\n" +
                         "    mensaje = \"Menor de edad\";\n" +
                         "}\n" +
                         "FinSi";

        TextAreaInput.setText(ejemplo);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnalizadorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnalizadorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnalizadorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnalizadorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AnalizadorUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAnalizadorTxt;
    private javax.swing.JButton BtnAnalizatTextArea;
    private javax.swing.JTextArea TextAreaAnalizado;
    private javax.swing.JTextArea TextAreaInput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
